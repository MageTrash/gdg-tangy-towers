[gd_resource type="VisualShader" load_steps=8 format=2]

[sub_resource type="VisualShaderNodeInput" id=1]
output_port_for_preview = 0
input_name = "uv"

[sub_resource type="VisualShaderNodeInput" id=2]
output_port_for_preview = 0
input_name = "time"

[sub_resource type="VisualShaderNodeScalarFunc" id=3]
output_port_for_preview = 0
function = 0

[sub_resource type="VisualShaderNodeScalarOp" id=4]
output_port_for_preview = 0
default_input_values = [ 0, 0.5, 1, 0.5 ]

[sub_resource type="VisualShaderNodeScalarOp" id=5]
output_port_for_preview = 0
default_input_values = [ 0, 0.0, 1, 2.0 ]
operator = 3

[sub_resource type="VisualShaderNodeTexture" id=6]
source = 2

[sub_resource type="VisualShaderNodeInput" id=7]
input_name = "texture_pixel_size"

[resource]
code = "shader_type canvas_item;



void vertex() {
// Output:0

}

void fragment() {
// Texture:7
	vec3 n_out7p0;
	float n_out7p1;
	{
		vec4 _tex_read = texture(TEXTURE , UV.xy);
		n_out7p0 = _tex_read.rgb;
		n_out7p1 = _tex_read.a;
	}

// Input:3
	float n_out3p0 = TIME;

// ScalarFunc:4
	float n_out4p0 = sin(n_out3p0);

// ScalarOp:6
	float n_in6p1 = 2.00000;
	float n_out6p0 = n_out4p0 / n_in6p1;

// ScalarOp:5
	float n_in5p1 = 0.50000;
	float n_out5p0 = n_out6p0 + n_in5p1;

// Output:0
	COLOR.rgb = n_out7p0;
	COLOR.a = n_out5p0;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -962.087, 278.6 )
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2( 180, 260 )
nodes/fragment/2/node = SubResource( 1 )
nodes/fragment/2/position = Vector2( -980, 280 )
nodes/fragment/3/node = SubResource( 2 )
nodes/fragment/3/position = Vector2( -680, 580 )
nodes/fragment/4/node = SubResource( 3 )
nodes/fragment/4/position = Vector2( -440, 580 )
nodes/fragment/5/node = SubResource( 4 )
nodes/fragment/5/position = Vector2( 100, 580 )
nodes/fragment/6/node = SubResource( 5 )
nodes/fragment/6/position = Vector2( -140, 580 )
nodes/fragment/7/node = SubResource( 6 )
nodes/fragment/7/position = Vector2( -260, 260 )
nodes/fragment/8/node = SubResource( 7 )
nodes/fragment/8/position = Vector2( -980, 500 )
nodes/fragment/connections = PoolIntArray( 6, 0, 5, 0, 4, 0, 6, 0, 3, 0, 4, 0, 5, 0, 0, 1, 7, 0, 0, 0 )
