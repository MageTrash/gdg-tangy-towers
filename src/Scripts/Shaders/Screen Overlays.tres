[gd_resource type="Shader" format=2]

[resource]
code = "shader_type canvas_item;

uniform bool effectActive = false;
uniform int effectType = 0;

uniform sampler2D noise;
uniform sampler2D noise2;
uniform sampler2D gradient;
uniform vec4 line_color_a: hint_color = vec4(1.0, 1.0, 1.0, 1.0);
uniform vec4 line_color_b: hint_color = vec4(0.0, 1.0, 1.0, 1.0);
uniform float inverse_speed = 60.0;

const float pi = 3.14159265359;

const float aberWidth = 1.5;

void fragment() {
	vec4 background = texture(SCREEN_TEXTURE, SCREEN_UV);
	
	// Dividing the max resolution into our preffered pixel size.
	vec2 res = 1./TEXTURE_PIXEL_SIZE; //Defines texture size.
	vec2 pixelUV; //Defines our new UV.
	pixelUV.x = round( (UV.x )*float(res.x) )/float(res.x);
	pixelUV.y = round( (UV.y )*float(res.y) )/float(res.y);
	
	float msin = sin(TIME*2.) * 0.25 + 0.5;
	
	vec4 color;
	// Case-dependent output
	switch(effectType) {
		case 0:
			color = background;
			break;
		case 1:
			//Grayscale shader
			float value = 0.299*background.r + 0.587 * background.g + 0.114 * background.b;
			color = vec4(vec3(value), 1.);
			break;
		case 2:
			//Chromatic aberration shader
			float offsetter = aberWidth * msin + 0.5;
			vec4 aber_left = texture(SCREEN_TEXTURE, vec2(SCREEN_UV.x + SCREEN_PIXEL_SIZE.x *offsetter, SCREEN_UV.y));
			vec4 aber_right = texture(SCREEN_TEXTURE, vec2(SCREEN_UV.x - SCREEN_PIXEL_SIZE.x *offsetter, SCREEN_UV.y));
			
			color = vec4(aber_left.g * 0.3 + aber_left.r, aber_right.g * 0.85, background.b * 0.85, 1.);
			break;
		case 3:
			//Speedlines shader
			float line_threshold = 0.6;
			float line_length = 1000.0;
			float angle = 0.0;
			vec2 uv = vec2(UV.x * cos(radians(angle)) - UV.y * sin(radians(angle)), UV.x * sin(radians(angle)) + UV.y * cos(radians(angle)));
			vec4 noise_line = texture(noise, vec2(uv.x / line_length + TIME / inverse_speed, uv.y));
			
			if (noise_line.r < line_threshold){
				color = vec4(0.);
			} else {
				color = mix(line_color_a, line_color_b, 1.0 - noise_line.r);
			}
			
			break;
		case 4:
			float value = 0.299*background.r + 0.587 * background.g + 0.114 * background.b;
			color = texture(gradient, vec2(value));
			
			break;
		case 5:
			vec2 distortedUV = SCREEN_UV + texture(noise2, UV * (msin * 0.1 + 0.25)).r * 0.02;
			vec4 aber = texture(SCREEN_TEXTURE, vec2(distortedUV.x + sin(TIME*2. + 3.) * SCREEN_PIXEL_SIZE.x * 2., distortedUV.y + cos(TIME*2. + 2.) * SCREEN_PIXEL_SIZE.y * 3.));
			
			color = texture(SCREEN_TEXTURE, distortedUV);
			color.r = aber.r;
			color.g -= 0.6*aber.g ;
			break;
		default:
			//Default shader
			color = background;
			break;
	}
	
	COLOR = color;
	
}"
